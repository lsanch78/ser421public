# The root Query type defines the entry points for querying data.
type Query {
    # Fetch a list of authors.
    authors: [Author]

    # Fetch an author by their unique ID.
    authorById(id: ID): Author

    # Fetch a list of books.
    books: [Book]

    # Fetch a book by its ISBN (International Standard Book Number).
    bookByISBN(isbn: String): Book

    # Fetch a list of books based on the author's ID
    # Ex. raw query: {"query":"query { booksByAuthorId(authorId: 0) { isbn title } }" }
    booksByAuthorId(authorId: ID): [Book]

    # Fetch a list of authors by their last name
    # Ex. raw query: {"query":"query { authorsByLastname(lastName: \"Fowler\") { firstName lastName } }" }
    authorsByLastname(lastName: String): [Author]


    # Fetch a list of book Titles (Strings) written by an author's first name
    # Ex. raw query: { "query": "{ bookTitlesByAuthorFirstname(firstName: \"Robert\") }" }
    bookTitlesByAuthorFirstname(firstName: String): [String]
}

# Represents a book in the system.
type Book {
    # The ISBN (International Standard Book Number) of the book.
    isbn: String

    # The title of the book.
    title: String

    # The unique ID of the author of the book.
    author: Author
}

# Represents an author who writes books.
type Author {
    # The unique ID of the author.
    id: ID

    # The first name of the author.
    firstName: String

    # The last name of the author.
    lastName: String

    # A list of books written by the author.
    books: [Book]
}

# Input type for adding a new author.
input AddAuthorInput {
    # The first name of the author.
    firstName: String

    # The last name of the author.
    lastName: String
}

# Input type for adding a new book.
input AddBookInput {
    # The ISBN (International Standard Book Number) of the book.
    isbn: String

    # The title of the book.
    title: String

    # The unique ID of the author of the book.
    authorId: ID
}

# Payload returned after successfully adding an author.
type AddAuthorPayload {
    # The newly added author.
    author: Author
}

# Payload returned after successfully adding a book.
type AddBookPayload {
    # The newly added book.
    book: Book
}

# The root Mutation type defines the entry points for mutating data.
type Mutation {
    # Add a new author to the system.
    addAuthor(input: AddAuthorInput): AddAuthorPayload

    # Add a new book to the system.
    addBook(input: AddBookInput): AddBookPayload

    # Update author's first name by their ID
    # Ex. raw query: { "query": "mutation { updateAuthorFirstNameById(authorId: 1, firstName: \"Kent\") }" }
    updateAuthorFirstNameById(authorId: ID!, firstName: String!): String

    # Remove a book by its isbn, if successful it will return the isbn else returns null
    # Ex. raw query:
    removeBookByIsbn(isbn: String): String
}
